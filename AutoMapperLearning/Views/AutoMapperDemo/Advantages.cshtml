@{
    ViewData["Title"] = "AutoMapper Advantages";
}

<div class="container mt-5">
    <h1 class="mb-4">üèÜ AutoMapper Advantages</h1>
    
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a asp-action="Index">Home</a></li>
            <li class="breadcrumb-item active">Advantages</li>
        </ol>
    </nav>

    <!-- Main Advantages -->
    <div class="card mb-4">
        <div class="card-header bg-success text-white">
            <h3>‚úÖ Key Benefits of Using AutoMapper</h3>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6 mb-3">
                    <div class="card h-100">
                        <div class="card-body">
                            <h5 class="card-title">1. üìâ Reduces Boilerplate Code</h5>
                            <p class="card-text">
                                <strong>Without AutoMapper:</strong>
                            </p>
                            <pre class="bg-light p-2"><code>var userDTO = new UserDTO
{
    Id = user.Id,
    FirstName = user.FirstName,
    LastName = user.LastName,
    Email = user.Email,
    FullName = user.FirstName + " " + user.LastName,
    Age = CalculateAge(user.DateOfBirth)
    // ... many more properties
};</code></pre>
                            <p class="card-text">
                                <strong>With AutoMapper:</strong>
                            </p>
                            <pre class="bg-light p-2"><code>var userDTO = _mapper.Map&lt;UserDTO&gt;(user);</code></pre>
                            <p class="text-success"><strong>Result:</strong> 90% less code!</p>
                        </div>
                    </div>
                </div>

                <div class="col-md-6 mb-3">
                    <div class="card h-100">
                        <div class="card-body">
                            <h5 class="card-title">2. üîÑ Easier Maintenance</h5>
                            <p class="card-text">
                                When you add a new property to your model, AutoMapper automatically maps it if names match.
                            </p>
                            <pre class="bg-light p-2"><code>// Add property to User
public string PhoneNumber { get; set; }

// Add property to UserDTO
public string PhoneNumber { get; set; }

// No code changes needed!
// AutoMapper automatically maps it</code></pre>
                            <p class="text-success"><strong>Result:</strong> Less maintenance work, fewer bugs!</p>
                        </div>
                    </div>
                </div>

                <div class="col-md-6 mb-3">
                    <div class="card h-100">
                        <div class="card-body">
                            <h5 class="card-title">3. üéØ Separation of Concerns</h5>
                            <p class="card-text">
                                Keep your domain models pure and separate from presentation/API concerns.
                            </p>
                            <ul>
                                <li><strong>Domain Models:</strong> Business logic, relationships, database entities</li>
                                <li><strong>DTOs:</strong> Data transfer, API responses, client communication</li>
                                <li><strong>ViewModels:</strong> View-specific data, UI formatting</li>
                            </ul>
                            <p class="text-success"><strong>Result:</strong> Clean architecture, better testability!</p>
                        </div>
                    </div>
                </div>

                <div class="col-md-6 mb-3">
                    <div class="card h-100">
                        <div class="card-body">
                            <h5 class="card-title">4. ‚ö° Performance Optimization</h5>
                            <p class="card-text">
                                With ProjectTo(), AutoMapper translates mappings to SQL, retrieving only needed columns.
                            </p>
                            <pre class="bg-light p-2"><code>// Efficient database query
var users = await dbContext.Users
    .ProjectTo&lt;UserDTO&gt;(_mapper.ConfigurationProvider)
    .ToListAsync();

// Only retrieves columns needed for UserDTO
// Not all User table columns!</code></pre>
                            <p class="text-success"><strong>Result:</strong> Faster queries, less memory usage!</p>
                        </div>
                    </div>
                </div>

                <div class="col-md-6 mb-3">
                    <div class="card h-100">
                        <div class="card-body">
                            <h5 class="card-title">5. üõ°Ô∏è Security & Data Hiding</h5>
                            <p class="card-text">
                                Expose only necessary data to clients, hiding sensitive information.
                            </p>
                            <pre class="bg-light p-2"><code>// Domain Model (NOT exposed)
public class User {
    public string Password { get; set; }
    public string SecurityToken { get; set; }
    public decimal Salary { get; set; }
}

// DTO (Exposed to API)
public class UserDTO {
    public string Name { get; set; }
    public string Email { get; set; }
    // No sensitive data!
}</code></pre>
                            <p class="text-success"><strong>Result:</strong> Better security, controlled data exposure!</p>
                        </div>
                    </div>
                </div>

                <div class="col-md-6 mb-3">
                    <div class="card h-100">
                        <div class="card-body">
                            <h5 class="card-title">6. üîÑ Bidirectional Mapping</h5>
                            <p class="card-text">
                                Easy two-way mapping with ReverseMap().
                            </p>
                            <pre class="bg-light p-2"><code>CreateMap&lt;User, UserDTO&gt;().ReverseMap();

// Map to DTO
var dto = _mapper.Map&lt;UserDTO&gt;(user);

// Map back to entity
var user = _mapper.Map&lt;User&gt;(dto);</code></pre>
                            <p class="text-success"><strong>Result:</strong> Flexible data flow in both directions!</p>
                        </div>
                    </div>
                </div>

                <div class="col-md-6 mb-3">
                    <div class="card h-100">
                        <div class="card-body">
                            <h5 class="card-title">7. üß™ Testability</h5>
                            <p class="card-text">
                                Mapping configurations are testable and verifiable.
                            </p>
                            <pre class="bg-light p-2"><code>[Fact]
public void UserProfile_Configuration_IsValid()
{
    var config = new MapperConfiguration(cfg => 
        cfg.AddProfile&lt;UserProfile&gt;());
    
    config.AssertConfigurationIsValid();
}</code></pre>
                            <p class="text-success"><strong>Result:</strong> Catch mapping errors early!</p>
                        </div>
                    </div>
                </div>

                <div class="col-md-6 mb-3">
                    <div class="card h-100">
                        <div class="card-body">
                            <h5 class="card-title">8. üé® Flexible Transformations</h5>
                            <p class="card-text">
                                Handle complex transformations easily.
                            </p>
                            <ul>
                                <li>Automatic flattening of nested objects</li>
                                <li>Custom value resolvers for complex logic</li>
                                <li>Type converters for data type changes</li>
                                <li>Conditional mapping based on rules</li>
                                <li>Collection and array transformations</li>
                            </ul>
                            <p class="text-success"><strong>Result:</strong> Handle any mapping scenario!</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Performance Comparison -->
    <div class="card mb-4">
        <div class="card-header bg-primary text-white">
            <h3>‚ö° Performance Comparison</h3>
        </div>
        <div class="card-body">
            <h5>Mapping 1000 Objects</h5>
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Approach</th>
                        <th>Time (ms)</th>
                        <th>Code Lines</th>
                        <th>Maintainability</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Manual Mapping</td>
                        <td>~50ms</td>
                        <td>20+ per mapping</td>
                        <td>‚ùå Poor</td>
                    </tr>
                    <tr class="table-success">
                        <td>AutoMapper (First Time)</td>
                        <td>~55ms</td>
                        <td>1 line</td>
                        <td>‚úÖ Excellent</td>
                    </tr>
                    <tr class="table-success">
                        <td>AutoMapper (Cached)</td>
                        <td>~52ms</td>
                        <td>1 line</td>
                        <td>‚úÖ Excellent</td>
                    </tr>
                </tbody>
            </table>
            <div class="alert alert-info">
                <strong>Note:</strong> AutoMapper performance is nearly identical to manual mapping, but with massive code reduction and better maintainability!
            </div>
        </div>
    </div>

    <!-- When to Use -->
    <div class="card mb-4">
        <div class="card-header bg-warning text-dark">
            <h3>ü§î When to Use AutoMapper</h3>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <h5 class="text-success">‚úÖ Good Use Cases</h5>
                    <ul>
                        <li>DTOs ‚Üî Domain Models</li>
                        <li>ViewModels for MVC/Razor</li>
                        <li>API request/response objects</li>
                        <li>Multi-layer applications</li>
                        <li>CRUD operations with similar structures</li>
                        <li>Entity Framework projections</li>
                    </ul>
                </div>
                <div class="col-md-6">
                    <h5 class="text-danger">‚ùå When NOT to Use</h5>
                    <ul>
                        <li>Very simple 1-2 property mappings</li>
                        <li>Completely different object structures</li>
                        <li>When you need extreme performance (rare)</li>
                        <li>Very complex business logic transformations</li>
                        <li>When manual mapping is more readable</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <!-- ROI Calculation -->
    <div class="card mb-4">
        <div class="card-header bg-info text-white">
            <h3>üí∞ Return on Investment (ROI)</h3>
        </div>
        <div class="card-body">
            <h5>Example Project: Medium-sized Web API</h5>
            <table class="table">
                <tr>
                    <td><strong>Without AutoMapper:</strong></td>
                    <td>~500 lines of mapping code</td>
                </tr>
                <tr>
                    <td><strong>With AutoMapper:</strong></td>
                    <td>~50 lines of profile configuration</td>
                </tr>
                <tr class="table-success">
                    <td><strong>Code Reduction:</strong></td>
                    <td>90% less code to write and maintain</td>
                </tr>
                <tr class="table-success">
                    <td><strong>Time Saved:</strong></td>
                    <td>~2-3 hours per week on mapping-related tasks</td>
                </tr>
                <tr class="table-success">
                    <td><strong>Bugs Reduced:</strong></td>
                    <td>~70% fewer mapping-related bugs</td>
                </tr>
            </table>
        </div>
    </div>

    <div class="text-center mt-4">
        <a asp-action="Index" class="btn btn-primary">‚Üê Back to Home</a>
        <a asp-action="BestPractices" class="btn btn-success">Best Practices ‚Üí</a>
    </div>
</div>

<style>
    .card {
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    pre {
        border: 1px solid #dee2e6;
        font-size: 0.85em;
    }
</style>
